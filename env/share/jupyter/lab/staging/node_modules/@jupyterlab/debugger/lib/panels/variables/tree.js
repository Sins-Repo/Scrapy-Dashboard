// Copyright (c) Jupyter Development Team.
// Distributed under the terms of the Modified BSD License.
import { ReactWidget } from '@jupyterlab/apputils';
import { caretDownEmptyIcon } from '@jupyterlab/ui-components';
import { ArrayExt } from '@lumino/algorithm';
import React, { useEffect, useState } from 'react';
import { convertType } from '.';
/**
 * The body for tree of variables.
 */
export class VariablesBodyTree extends ReactWidget {
    /**
     * Instantiate a new Body for the tree of variables.
     *
     * @param options The instantiation options for a VariablesBodyTree.
     */
    constructor(options) {
        super();
        this._scope = '';
        this._scopes = [];
        this._filter = new Set();
        this._service = options.service;
        const model = options.model;
        model.changed.connect(this._updateScopes, this);
        this.addClass('jp-DebuggerVariables-body');
    }
    /**
     * Render the VariablesBodyTree.
     */
    render() {
        var _a;
        const scope = (_a = this._scopes.find(scope => scope.name === this._scope)) !== null && _a !== void 0 ? _a : this._scopes[0];
        return scope ? (React.createElement(VariablesComponent, { key: scope.name, service: this._service, data: scope.variables, filter: this._filter })) : (React.createElement("div", null));
    }
    /**
     * Set the variable filter list.
     */
    set filter(filter) {
        this._filter = filter;
        this.update();
    }
    /**
     * Set the current scope
     */
    set scope(scope) {
        this._scope = scope;
        this.update();
    }
    /**
     * Update the scopes and the tree of variables.
     *
     * @param model The variables model.
     */
    _updateScopes(model) {
        if (ArrayExt.shallowEqual(this._scopes, model.scopes)) {
            return;
        }
        this._scopes = model.scopes;
        this.update();
    }
}
/**
 * A React component to display a list of variables.
 *
 * @param {object} props The component props.
 * @param props.data An array of variables.
 * @param props.service The debugger service.
 * @param props.filter Optional variable filter list.
 */
const VariablesComponent = ({ data, service, filter }) => {
    const [variables, setVariables] = useState(data);
    useEffect(() => {
        setVariables(data);
    }, [data]);
    return (React.createElement("ul", null, variables === null || variables === void 0 ? void 0 : variables.filter(variable => !(filter || new Set()).has(variable.evaluateName || '')).map(variable => {
        const key = `${variable.name}-${variable.evaluateName}-${variable.type}-${variable.value}`;
        return (React.createElement(VariableComponent, { key: key, data: variable, service: service, filter: filter }));
    })));
};
/**
 * A React component to display one node variable in tree.
 *
 * @param {object} props The component props.
 * @param props.data An array of variables.
 * @param props.service The debugger service.
 * @param props.filter Optional variable filter list.
 */
const VariableComponent = ({ data, service, filter }) => {
    const [variable] = useState(data);
    const [expanded, setExpanded] = useState();
    const [variables, setVariables] = useState();
    const styleName = {
        color: 'var(--jp-mirror-editor-attribute-color)'
    };
    const styleType = {
        color: 'var(--jp-mirror-editor-string-color)'
    };
    const expandable = variable.variablesReference !== 0 || variable.type === 'function';
    const onVariableClicked = async (e) => {
        if (!expandable) {
            return;
        }
        e.stopPropagation();
        const variables = await service.inspectVariable(variable.variablesReference);
        setExpanded(!expanded);
        setVariables(variables);
    };
    return (React.createElement("li", { onClick: (e) => onVariableClicked(e) },
        React.createElement(caretDownEmptyIcon.react, { visibility: expandable ? 'visible' : 'hidden', stylesheet: "menuItem", tag: "span", transform: expanded ? 'rotate(0deg)' : 'rotate(-90deg)' }),
        React.createElement("span", { style: styleName }, variable.name),
        React.createElement("span", null, ": "),
        React.createElement("span", { style: styleType }, convertType(variable)),
        expanded && variables && (React.createElement(VariablesComponent, { key: variable.name, data: variables, service: service, filter: filter }))));
};
//# sourceMappingURL=tree.js.map