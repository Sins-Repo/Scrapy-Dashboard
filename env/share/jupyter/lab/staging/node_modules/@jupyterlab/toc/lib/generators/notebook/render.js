// Copyright (c) Jupyter Development Team.
// Distributed under the terms of the Modified BSD License.
import * as React from 'react';
import { ellipsesIcon } from '@jupyterlab/ui-components';
import { sanitizerOptions } from '../../utils/sanitizer_options';
import { CodeComponent } from './codemirror';
/**
 * Renders a notebook table of contents item.
 *
 * @private
 * @param options - generator options
 * @param tracker - notebook tracker
 * @param item - notebook heading
 * @returns rendered item
 */
function render(options, tracker, item) {
    let jsx;
    if (item.type === 'markdown' || item.type === 'header') {
        let fontSizeClass = 'toc-level-size-default';
        let numbering = item.numbering && options.numbering ? item.numbering : '';
        if (item.type === 'header') {
            fontSizeClass = 'toc-level-size-' + item.level;
        }
        if (item.html && (item.type === 'header' || options.showMarkdown)) {
            jsx = (React.createElement("span", { dangerouslySetInnerHTML: {
                    __html: numbering +
                        options.sanitizer.sanitize(item.html, sanitizerOptions)
                }, className: item.type + '-cell toc-cell-item' }));
            // Render the headers:
            if (item.type === 'header') {
                let button = (React.createElement("div", { className: "jp-Collapser p-Widget lm-Widget", onClick: (event) => {
                        event.stopPropagation();
                        onClick(item);
                    } },
                    React.createElement("div", { className: "toc-Collapser-child" })));
                let collapsed;
                if (item.cellRef.model.metadata.has('toc-hr-collapsed')) {
                    collapsed = item.cellRef.model.metadata.get('toc-hr-collapsed');
                }
                let ellipseButton = collapsed ? (React.createElement("div", { className: "toc-Ellipses", onClick: (event) => {
                        event.stopPropagation();
                        onClick(item);
                    } },
                    React.createElement(ellipsesIcon.react, null))) : (React.createElement("div", null));
                // Render the heading item:
                jsx = (React.createElement("div", { className: 'toc-entry-holder ' +
                        fontSizeClass +
                        (tracker.activeCell === item.cellRef ? ' toc-active-cell' : '') },
                    button,
                    jsx,
                    ellipseButton));
            }
            return jsx;
        }
        if (item.type === 'header' || options.showMarkdown) {
            // Render headers/markdown for plain text:
            jsx = (React.createElement("span", { className: item.type + '-cell toc-cell-item' }, numbering + item.text));
            if (item.type === 'header') {
                let button = (React.createElement("div", { className: "jp-Collapser p-Widget lm-Widget", onClick: (event) => {
                        event.stopPropagation();
                        onClick(item);
                    } },
                    React.createElement("div", { className: "toc-Collapser-child" })));
                let collapsed;
                if (item.cellRef.model.metadata.has('toc-hr-collapsed')) {
                    collapsed = item.cellRef.model.metadata.get('toc-hr-collapsed');
                }
                let ellipseButton = collapsed ? (React.createElement("div", { className: "toc-Ellipses", onClick: (event) => {
                        event.stopPropagation();
                        onClick(item);
                    } },
                    React.createElement(ellipsesIcon.react, null))) : (React.createElement("div", null));
                jsx = (React.createElement("div", { className: 'toc-entry-holder ' +
                        fontSizeClass +
                        (tracker.activeCell === item.cellRef ? ' toc-active-cell' : '') },
                    button,
                    jsx,
                    ellipseButton));
            }
            return jsx;
        }
        return null;
    }
    if (item.type === 'code' && options.showCode) {
        // Render code cells:
        return (React.createElement("div", { className: "toc-code-cell-div" },
            React.createElement("div", { className: "toc-code-cell-prompt" }, item.prompt),
            React.createElement("span", { className: 'toc-code-span' },
                React.createElement(CodeComponent, { sanitizer: options.sanitizer, heading: item }))));
    }
    return null;
    /**
     * Callback invoked upon encountering a "click" event.
     *
     * @private
     * @param heading - notebook heading that was clicked
     */
    function onClick(heading) {
        let collapsed;
        if (heading.cellRef.model.metadata.has('toc-hr-collapsed')) {
            collapsed = heading.cellRef.model.metadata.get('toc-hr-collapsed');
            heading.cellRef.model.metadata.delete('toc-hr-collapsed');
        }
        else {
            collapsed = false;
            heading.cellRef.model.metadata.set('toc-hr-collapsed', true);
        }
        if (heading) {
            options.updateAndCollapse({
                heading: heading,
                collapsedState: collapsed,
                tocType: 'notebook'
            });
            // NOTE: we can imagine a future in which this extension combines with a collapsible-header/ings extension such that we can programmatically close notebook "sections" according to a public API specifically intended for collapsing notebook sections. In the meantime, we need to resort to manually "collapsing" sections...
        }
        else {
            options.updateWidget();
        }
    }
}
/**
 * Exports.
 */
export { render };
//# sourceMappingURL=render.js.map