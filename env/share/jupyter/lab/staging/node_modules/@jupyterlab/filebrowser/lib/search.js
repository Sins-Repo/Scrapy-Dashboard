// Copyright (c) Jupyter Development Team.
// Distributed under the terms of the Modified BSD License.
import React, { useState, useEffect } from 'react';
import { StringExt } from '@lumino/algorithm';
import { InputGroup } from '@jupyterlab/ui-components';
import { ReactWidget } from '@jupyterlab/apputils';
/**
 * Perform a fuzzy search on a single item.
 */
function fuzzySearch(source, query) {
    // Set up the match score and indices array.
    let score = Infinity;
    let indices = null;
    // The regex for search word boundaries
    const rgx = /\b\w/g;
    let continueSearch = true;
    // Search the source by word boundary.
    while (continueSearch) {
        // Find the next word boundary in the source.
        let rgxMatch = rgx.exec(source);
        // Break if there is no more source context.
        if (!rgxMatch) {
            break;
        }
        // Run the string match on the relevant substring.
        let match = StringExt.matchSumOfDeltas(source, query, rgxMatch.index);
        // Break if there is no match.
        if (!match) {
            break;
        }
        // Update the match if the score is better.
        if (match && match.score <= score) {
            score = match.score;
            indices = match.indices;
        }
    }
    // Bail if there was no match.
    if (!indices || score === Infinity) {
        return null;
    }
    // Handle a split match.
    return {
        score,
        indices
    };
}
const FilterBox = (props) => {
    const [filter, setFilter] = useState('');
    if (props.forceRefresh) {
        useEffect(() => {
            props.listing.model.setFilter((item) => {
                return true;
            });
        }, []);
    }
    /**
     * Handler for search input changes.
     */
    const handleChange = (e) => {
        const target = e.target;
        setFilter(target.value);
        props.listing.model.setFilter((item) => {
            if (props.useFuzzyFilter) {
                // Run the fuzzy search for the item and query.
                const name = item.name.toLowerCase();
                const query = target.value.toLowerCase();
                let score = fuzzySearch(name, query);
                // Ignore the item if it is not a match.
                if (!score) {
                    item.indices = [];
                    return false;
                }
                item.indices = score.indices;
                return true;
            }
            const i = item.name.indexOf(target.value);
            if (i === -1) {
                item.indices = [];
                return false;
            }
            item.indices = [...Array(target.value.length).keys()].map(x => x + i);
            return true;
        });
    };
    return (React.createElement(InputGroup, { type: "text", rightIcon: "ui-components:search", placeholder: props.placeholder, onChange: handleChange, value: filter }));
};
/**
 * A widget which hosts a input textbox to filter on file names.
 */
export const FilenameSearcher = (props) => {
    return ReactWidget.create(React.createElement(FilterBox, { listing: props.listing, useFuzzyFilter: props.useFuzzyFilter, placeholder: props.placeholder, forceRefresh: props.forceRefresh }));
};
//# sourceMappingURL=search.js.map