{"version":3,"sources":["webpack://@jupyterlab/application-top/./node_modules/jupyterlab-dash/style/index.css","webpack://@jupyterlab/application-top/./node_modules/jupyterlab-dash/lib/index.js","webpack://@jupyterlab/application-top/./node_modules/jupyterlab-dash/style/index.css?7759"],"names":["___CSS_LOADER_EXPORT___","push","module","id","Object","defineProperty","exports","value","application_1","coreutils_1","notebook_1","console_1","widgets_1","DashIFrameWidget","Widget","port","url","super","this","title","label","closable","addClass","serviceUrl","iframeElement","document","createElement","setAttribute","iframe","src","node","appendChild","msg","activate","app","restorer","notebooks","consoles","widgets","Map","widgetAdded","connect","sender","nbPanel","sessionContext","ready","then","session","kernel","registerCommTarget","consolePanel","comm","onMsg","msgData","content","data","type","widget","has","update","set","get","isAttached","shell","add","activateById","baseUrl","PageConfig","getBaseUrl","baseSubpath","getOption","n","lastIndexOf","serverUrl","slice","send","server_url","base_subpath","frontend","extension","autoStart","requires","ILayoutRestorer","INotebookTracker","IConsoleTracker","default","options","insert","singleton"],"mappings":"0NAGA,IAAIA,EAA0B,IAA4B,KAE1DA,EAAwBC,KAAK,CAACC,EAAOC,GAAI,6GAA8G,GAAG,CAAC,QAAU,EAAE,QAAU,CAAC,4DAA4D,MAAQ,GAAG,SAAW,uDAAuD,eAAiB,CAAC,8GAA8G,WAAa,MAExc,W,6BCNAC,OAAOC,eAAeC,EAAS,aAAc,CAAEC,MAAO,OACtD,MAAMC,EAAgB,EAAQ,OAC9B,MAAMC,EAAc,EAAQ,OAC5B,MAAMC,EAAa,EAAQ,OAC3B,MAAMC,EAAY,EAAQ,OAC1B,MAAMC,EAAY,EAAQ,MAC1B,EAAQ,OACR,MAAMC,UAAyBD,EAAUE,OAIrC,YAAYC,EAAMC,GACdC,QACAC,KAAKf,GAAKY,EACVG,KAAKC,MAAMC,MAAQ,eAAeL,KAClCG,KAAKC,MAAME,SAAW,KACtBH,KAAKI,SAAS,iBAIdJ,KAAKI,SAAS,aACd,MAAMC,EAAaP,EACnB,MAAMQ,EAAgBC,SAASC,cAAc,UAC7CF,EAAcG,aAAa,UAAWJ,GACtCL,KAAKU,OAASJ,EACdN,KAAKU,OAAOC,IAAMN,EAClBL,KAAKU,OAAOzB,GAAK,UAAYe,KAAKf,GAClCe,KAAKY,KAAKC,YAAYb,KAAKU,QAK/B,gBAAgBI,GACZd,KAAKU,OAAOC,KAAO,IAG3B,SAASI,EAASC,EAAKC,EAAUC,EAAWC,GAExC,IAAIC,EAAU,IAAIC,IAElBH,EAAUI,YAAYC,SAAQ,CAACC,EAAQC,KAEnC,MAAMC,EAAiBD,EAAQC,eAC/BA,EAAeC,MAAMC,MAAK,KACtB,MAAMC,EAAUH,EAAeG,QAC/B,IAAIC,EAASD,EAAQC,OACrBC,EAAmBD,EAAQV,EAASJ,SAI5CG,EAASG,YAAYC,SAAQ,CAACC,EAAQQ,KAClC,MAAMN,EAAiBM,EAAaN,eACpCA,EAAeC,MAAMC,MAAK,KACtB,MAAMC,EAAUH,EAAeG,QAC/B,IAAIC,EAASD,EAAQC,OACrBC,EAAmBD,EAAQV,EAASJ,SAIhD,SAASe,EAAmBD,EAAQV,EAASJ,GACzCc,EAAOC,mBAAmB,gBAAgB,CAACE,EAAMnB,KAC7CmB,EAAKC,MAASpB,IACV,IAAIqB,EAAUrB,EAAIsB,QAAQC,KAC1B,GAAIF,EAAQG,OAAS,OAAQ,CACzB,IAAIC,EACJ,IAAKnB,EAAQoB,IAAIL,EAAQtC,MAAO,CAE5B0C,EAAS,IAAI5C,EAAiBwC,EAAQtC,KAAMsC,EAAQrC,KACpDyC,EAAOE,SACPrB,EAAQsB,IAAIP,EAAQtC,KAAM0C,OAGzB,CACDA,EAASnB,EAAQuB,IAAIR,EAAQtC,MAEjC,IAAK0C,EAAOK,WAAY,CAGpB5B,EAAI6B,MAAMC,IAAIP,EAAQ,QACtBA,EAAOE,aAEN,CAEDF,EAAOE,SAGXzB,EAAI6B,MAAME,aAAaR,EAAOtD,SAE7B,GAAIkD,EAAQG,OAAS,mBAAoB,CAE1C,MAAMU,EAAUzD,EAAY0D,WAAWC,aACvC,MAAMC,EAAc5D,EAAY0D,WAAWG,UAAU,WACrD,MAAMC,EAAIL,EAAQM,YAAYH,GAC9B,MAAMI,EAAYP,EAAQQ,MAAM,EAAGH,GACnCpB,EAAKwB,KAAK,CACNnB,KAAM,oBACNoB,WAAYH,EACZI,aAAcR,EACdS,SAAU,oBAS9B,MAAMC,EAAY,CACd5E,GAAI,kBACJ6E,UAAW,KACXC,SAAU,CAACzE,EAAc0E,gBAAiBxE,EAAWyE,iBAAkBxE,EAAUyE,iBACjFnD,SAAUA,GAEd3B,EAAQ+E,QAAUN,G,sGC/GlB,IAAIO,EAAU,GAEdA,EAAQC,OAAS,OACjBD,EAAQE,UAAY,MAEpB,IAAI7B,EAAS,IAAI,IAAS2B,GAI1B,QAAe,YAAkB","file":"7036.f4211db1116626d4665c.js?v=f4211db1116626d4665c","sourcesContent":["// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".jp-dashWidget iframe {\\n  height: 100%;\\n  width: 100%;\\n  padding: 20px;\\n  box-sizing: border-box;\\n}\\n\", \"\",{\"version\":3,\"sources\":[\"webpack://./node_modules/jupyterlab-dash/style/index.css\"],\"names\":[],\"mappings\":\"AAAA;EACE,YAAY;EACZ,WAAW;EACX,aAAa;EACb,sBAAsB;AACxB\",\"sourcesContent\":[\".jp-dashWidget iframe {\\n  height: 100%;\\n  width: 100%;\\n  padding: 20px;\\n  box-sizing: border-box;\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst application_1 = require(\"@jupyterlab/application\");\nconst coreutils_1 = require(\"@jupyterlab/coreutils\");\nconst notebook_1 = require(\"@jupyterlab/notebook\");\nconst console_1 = require(\"@jupyterlab/console\");\nconst widgets_1 = require(\"@lumino/widgets\");\nrequire(\"../style/index.css\");\nclass DashIFrameWidget extends widgets_1.Widget {\n    /**\n     * Construct a new DashIFrameWidget.\n     */\n    constructor(port, url) {\n        super();\n        this.id = port;\n        this.title.label = `Dash (port: ${port})`;\n        this.title.closable = true;\n        this.addClass('jp-dashWidget');\n        // Add jp-IFrame class to keep drag events from being lost to the iframe\n        // See https://github.com/phosphorjs/phosphor/issues/305\n        // See https://github.com/jupyterlab/jupyterlab/blob/master/packages/apputils/style/iframe.css#L17-L35\n        this.addClass('jp-IFrame');\n        const serviceUrl = url;\n        const iframeElement = document.createElement('iframe');\n        iframeElement.setAttribute('baseURI', serviceUrl);\n        this.iframe = iframeElement;\n        this.iframe.src = serviceUrl;\n        this.iframe.id = 'iframe-' + this.id;\n        this.node.appendChild(this.iframe);\n    }\n    /**\n     * Handle update requests for the widget.\n     */\n    onUpdateRequest(msg) {\n        this.iframe.src += '';\n    }\n}\nfunction activate(app, restorer, notebooks, consoles) {\n    // Declare a widget variable\n    let widgets = new Map();\n    // Watch notebook creation\n    notebooks.widgetAdded.connect((sender, nbPanel) => {\n        // const session = nbPanel.session;\n        const sessionContext = nbPanel.sessionContext;\n        sessionContext.ready.then(() => {\n            const session = sessionContext.session;\n            let kernel = session.kernel;\n            registerCommTarget(kernel, widgets, app);\n        });\n    });\n    // Watch console creation\n    consoles.widgetAdded.connect((sender, consolePanel) => {\n        const sessionContext = consolePanel.sessionContext;\n        sessionContext.ready.then(() => {\n            const session = sessionContext.session;\n            let kernel = session.kernel;\n            registerCommTarget(kernel, widgets, app);\n        });\n    });\n}\nfunction registerCommTarget(kernel, widgets, app) {\n    kernel.registerCommTarget('jupyter_dash', (comm, msg) => {\n        comm.onMsg = (msg) => {\n            let msgData = msg.content.data;\n            if (msgData.type === 'show') {\n                let widget;\n                if (!widgets.has(msgData.port)) {\n                    // Create a new widget\n                    widget = new DashIFrameWidget(msgData.port, msgData.url);\n                    widget.update();\n                    widgets.set(msgData.port, widget);\n                    // Add instance tracker stuff\n                }\n                else {\n                    widget = widgets.get(msgData.port);\n                }\n                if (!widget.isAttached) {\n                    // Attach the widget to the main work area\n                    // if it's not there\n                    app.shell.add(widget, 'main');\n                    widget.update();\n                }\n                else {\n                    // Refresh the widget\n                    widget.update();\n                }\n                // Activate the widget\n                app.shell.activateById(widget.id);\n            }\n            else if (msgData.type === 'base_url_request') {\n                // Build server url and base subpath.\n                const baseUrl = coreutils_1.PageConfig.getBaseUrl();\n                const baseSubpath = coreutils_1.PageConfig.getOption('baseUrl');\n                const n = baseUrl.lastIndexOf(baseSubpath);\n                const serverUrl = baseUrl.slice(0, n);\n                comm.send({\n                    type: 'base_url_response',\n                    server_url: serverUrl,\n                    base_subpath: baseSubpath,\n                    frontend: \"jupyterlab\",\n                });\n            }\n        };\n    });\n}\n/**\n * Initialization data for the jupyterlab-dash extension.\n */\nconst extension = {\n    id: 'jupyterlab_dash',\n    autoStart: true,\n    requires: [application_1.ILayoutRestorer, notebook_1.INotebookTracker, console_1.IConsoleTracker],\n    activate: activate\n};\nexports.default = extension;\n","import api from \"!../../style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../css-loader/dist/cjs.js!./index.css\";\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nexport default content.locals || {};"],"sourceRoot":""}